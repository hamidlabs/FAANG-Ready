"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/content.ts":
/*!************************!*\
  !*** ./lib/content.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchAllTopics: function() { return /* binding */ fetchAllTopics; },\n/* harmony export */   fetchTopicContent: function() { return /* binding */ fetchTopicContent; },\n/* harmony export */   fetchTopicFiles: function() { return /* binding */ fetchTopicFiles; },\n/* harmony export */   getTopicContentSync: function() { return /* binding */ getTopicContentSync; },\n/* harmony export */   groupTopicsIntoPhases: function() { return /* binding */ groupTopicsIntoPhases; },\n/* harmony export */   phases: function() { return /* binding */ phases; }\n/* harmony export */ });\nconst phases = [\n    {\n        id: \"phase1\",\n        title: \"English Communication \",\n        description: \"Master technical communication and interview skills\",\n        order_index: 1,\n        topics: [\n            {\n                id: \"01-technical-english\",\n                title: \"Technical English Sentence Builder\",\n                filename: \"01-technical-english-sentence-builder.md\",\n                phase: \"phase1\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"02-interview-conversations\",\n                title: \"Interview Conversation Scripts\",\n                filename: \"02-interview-conversation-scripts.md\",\n                phase: \"phase1\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"03-code-explanation\",\n                title: \"Code Explanation Framework\",\n                filename: \"03-code-explanation-framework.md\",\n                phase: \"phase1\",\n                order_index: 3,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"04-behavioral-answers\",\n                title: \"Behavioral Answer Templates\",\n                filename: \"04-behavioral-answer-templates.md\",\n                phase: \"phase1\",\n                order_index: 4,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"07-debugging-testing\",\n                title: \"Debugging and Testing Framework\",\n                filename: \"07-debugging-and-testing-framework.md\",\n                phase: \"phase1\",\n                order_index: 5,\n                completed: false,\n                starred: false\n            }\n        ]\n    },\n    {\n        id: \"phase2\",\n        title: \"Problem-Solving Mental Framework\",\n        description: \"Build systematic approach to algorithmic thinking\",\n        order_index: 2,\n        topics: [\n            {\n                id: \"05-problem-solving\",\n                title: \"Universal Problem-Solving Method\",\n                filename: \"05-universal-problem-solving-method.md\",\n                phase: \"phase2\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"06-pattern-recognition\",\n                title: \"Pattern Recognition Visual Guide\",\n                filename: \"06-pattern-recognition-visual-guide.md\",\n                phase: \"phase2\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            }\n        ]\n    },\n    {\n        id: \"phase3\",\n        title: \"Core Data Structures\",\n        description: \"Master fundamental data structures\",\n        order_index: 3,\n        topics: [\n            {\n                id: \"09-arrays-strings\",\n                title: \"Arrays and Strings Complete Guide\",\n                filename: \"09-arrays-and-strings-complete-guide.md\",\n                phase: \"phase3\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"10-linked-lists\",\n                title: \"Linked Lists from Zero\",\n                filename: \"10-linked-lists-from-zero.md\",\n                phase: \"phase3\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"11-stacks-queues\",\n                title: \"Stacks and Queues Practical\",\n                filename: \"11-stacks-and-queues-practical.md\",\n                phase: \"phase3\",\n                order_index: 3,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"12-trees-graphs\",\n                title: \"Trees and Graphs Fundamentals\",\n                filename: \"12-trees-and-graphs-fundamentals.md\",\n                phase: \"phase3\",\n                order_index: 4,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"13-hash-tables\",\n                title: \"Hash Tables and Sets Mastery\",\n                filename: \"13-hash-tables-and-sets-mastery.md\",\n                phase: \"phase3\",\n                order_index: 5,\n                completed: false,\n                starred: false\n            }\n        ]\n    },\n    {\n        id: \"phase4\",\n        title: \"Essential Algorithms\",\n        description: \"Core sorting and searching algorithms\",\n        order_index: 4,\n        topics: [\n            {\n                id: \"14-sorting-algorithms\",\n                title: \"Sorting Algorithms Complete\",\n                filename: \"14-sorting-algorithms-complete.md\",\n                phase: \"phase4\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"15-searching-algorithms\",\n                title: \"Searching Algorithms Master\",\n                filename: \"15-searching-algorithms-master.md\",\n                phase: \"phase4\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            }\n        ]\n    },\n    {\n        id: \"phase5\",\n        title: \"Pattern-Based Problem Solving\",\n        description: \"Master the most important coding patterns\",\n        order_index: 5,\n        topics: [\n            {\n                id: \"18-two-pointers\",\n                title: \"Two Pointers Pattern\",\n                filename: \"18-two-pointers-pattern.md\",\n                phase: \"phase5\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"19-sliding-window\",\n                title: \"Sliding Window Pattern\",\n                filename: \"19-sliding-window-pattern.md\",\n                phase: \"phase5\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"20-fast-slow-pointers\",\n                title: \"Fast-Slow Pointers Pattern\",\n                filename: \"20-fast-slow-pointers-pattern.md\",\n                phase: \"phase5\",\n                order_index: 3,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"21-merge-intervals\",\n                title: \"Merge Intervals Pattern\",\n                filename: \"21-merge-intervals-pattern.md\",\n                phase: \"phase5\",\n                order_index: 4,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"22-cyclic-sort\",\n                title: \"Cyclic Sort Pattern\",\n                filename: \"22-cyclic-sort-pattern.md\",\n                phase: \"phase5\",\n                order_index: 5,\n                completed: false,\n                starred: false\n            }\n        ]\n    },\n    {\n        id: \"phase6\",\n        title: \"Advanced Patterns\",\n        description: \"Dynamic programming and advanced techniques\",\n        order_index: 6,\n        topics: [\n            {\n                id: \"28-dynamic-programming\",\n                title: \"Dynamic Programming Patterns\",\n                filename: \"28-dynamic-programming-patterns.md\",\n                phase: \"phase6\",\n                order_index: 1,\n                completed: false,\n                starred: false\n            },\n            {\n                id: \"29-greedy-algorithms\",\n                title: \"Greedy Algorithms Pattern\",\n                filename: \"29-greedy-algorithms-pattern.md\",\n                phase: \"phase6\",\n                order_index: 2,\n                completed: false,\n                starred: false\n            }\n        ]\n    }\n];\n// Dynamic content loading functions\nasync function fetchTopicContent(topicId) {\n    let fileName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"main.md\";\n    try {\n        const response = await fetch(\"/api/content/\".concat(topicId, \"/\").concat(fileName));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch content: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.content;\n    } catch (error) {\n        console.error(\"Error fetching content for \".concat(topicId, \"/\").concat(fileName, \":\"), error);\n        return \"# Content Not Found\\n\\nUnable to load content for this topic.\";\n    }\n}\nasync function fetchTopicFiles(topicId) {\n    try {\n        const response = await fetch(\"/api/content/list-files\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                topicId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch files: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.files || [];\n    } catch (error) {\n        console.error(\"Error fetching files for \".concat(topicId, \":\"), error);\n        return [];\n    }\n}\nasync function fetchAllTopics() {\n    try {\n        const response = await fetch(\"/api/topics\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch topics: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.topics || [];\n    } catch (error) {\n        console.error(\"Error fetching topics:\", error);\n        return [];\n    }\n}\n// Group topics into phases\nfunction groupTopicsIntoPhases(topics) {\n    const phaseMap = new Map();\n    // Initialize phases\n    const phaseInfo = {\n        phase1: {\n            title: \"English Communication Foundation\",\n            description: \"Master technical communication and interview skills\",\n            order_index: 1\n        },\n        phase2: {\n            title: \"Problem-Solving Mental Framework\",\n            description: \"Build systematic approach to algorithmic thinking\",\n            order_index: 2\n        },\n        phase3: {\n            title: \"Core Data Structures\",\n            description: \"Master fundamental data structures\",\n            order_index: 3\n        },\n        phase4: {\n            title: \"Essential Algorithms\",\n            description: \"Core sorting and searching algorithms\",\n            order_index: 4\n        },\n        phase5: {\n            title: \"Pattern-Based Problem Solving\",\n            description: \"Master the most important coding patterns\",\n            order_index: 5\n        },\n        phase6: {\n            title: \"Advanced Patterns\",\n            description: \"Dynamic programming and advanced techniques\",\n            order_index: 6\n        }\n    };\n    // Group topics by phase\n    topics.forEach((topic)=>{\n        const phaseId = topic.phase;\n        if (!phaseMap.has(phaseId)) {\n            const info = phaseInfo[phaseId] || {\n                title: \"Phase \".concat(phaseId),\n                description: \"\",\n                order_index: 999\n            };\n            phaseMap.set(phaseId, {\n                id: phaseId,\n                ...info,\n                topics: []\n            });\n        }\n        phaseMap.get(phaseId).topics.push(topic);\n    });\n    // Convert to array and sort\n    const phases = Array.from(phaseMap.values());\n    phases.sort((a, b)=>a.order_index - b.order_index);\n    // Sort topics within each phase\n    phases.forEach((phase)=>{\n        phase.topics.sort((a, b)=>a.order_index - b.order_index);\n    });\n    return phases;\n}\n// Legacy function for backward compatibility\nfunction getTopicContentSync(filename) {\n    const title = filename.replace(\".md\", \"\").split(\"-\").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n    return \"# \".concat(title, \"\\n\\nContent is being loaded dynamically from the content directory.\\n\\nThis topic will show the latest content from your markdown files automatically.\\n\\n## Available Files\\n\\nFiles in this topic directory will be auto-discovered and listed here.\\n\\n---\\n\\n*Note: Content is now loaded dynamically from the `content/\").concat(filename.replace(\"/main.md\", \"\"), \"` directory.*\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/content.ts\n"));

/***/ })

});